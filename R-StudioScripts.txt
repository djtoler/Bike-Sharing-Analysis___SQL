#INSTALL PACKAGES AND LIBRARIES
install.packages('tidyverse')
library(tidyverse)
distance_casual <- read.csv("R-Test-Distance-Member_Raw.csv")
install.packages('geodist')
library(geodist)

#MANIPULATE DATA TO EXTRACT INFO NEEDS TO CALCULATE GEO DISTANCES
start <- distance_casual[,2:3]
end <- distance_casual[,4:5]
ride_id <- distance_casual[,6]
names(start) <- c('lat','lon')
names(end) <- c('lat','lon')

#USE GEODIST FUNCTION TO DO CALCULATIONS
metres <- geodist(x=start, y=end, paired = T, measure = 'geodesic')
miles <- metres / 1601
miles

trips4 <- data.frame(Apple = distance_casual[,1], Distance = miles)
trips3 <- trips[order(-trips$Distance),]
trips3

stations3 <- aggregate(Distance ~ Apple, trips, mean)
stations3 <- stations[order(-stations$Distance),]
stations3

data(stations)

write.table(trips4, file="R-Test-Distance-Members_Raw(calculated).csv", sep=",")

install.packages('geodist')
library(geodist)

df <- read.csv('r-studio-demo-2.csv')

# Separating and renaming start and end points
start <- df[,2:3]
end <- df[,4:5]
names(start) <- c('lat','lon')
names(end) <- c('lat','lon')

# Calculating distance
metres <- geodist(x=start, y=end, paired = T, measure = 'geodesic')
miles <- metres / 1601
miles

# Sorting the distances
trips <- data.frame(Station.ID = df[,1], Distance = miles)
trips <- trips[order(-trips$Distance),]

# Grouping by category

stations <- aggregate(Distance ~ Station.ID, trips, mean)
stations <- stations[order(-stations$Distance),]
stations

# Plotting
# Simple plot
plot(stations$Distance)

# MAKE PLOTS LOOK BETTER
library(ggplot2)
stations$Station.ID <- as.character(stations$Station.ID)
ggplot(stations, aes(1:100, Distance)) +
  geom_col() # +
  # something to change the xticks/xnames

# rownames(miles) <- cities
# colnames(miles) <- cities
# miles
# 
# m <- matrix(nrow=0,ncol=3,dimnames = list(c(),c('Origin','Destination','Distance')))
# trips <- as.data.frame(m)
# 
# for (i in 1:nrow(miles)) {
#   for (j in 1:ncol(miles)) {
#     if (j == i) { 
#       next
#     }
#     trips = rbind(trips, setNames(data.frame(cities[i], cities[j], miles[i,j]),names(trips)))
#   }
# }
# 

install.packages('tidyverse')
library(tidyverse)
distance_casual <- read.csv("New_Distance_Format_Member.csv")
install.packages('geodist')
library(geodist)

start <- distance_casual[,1:2]
end <- distance_casual[,3:4]
ride <- distance_casual[,5]
names(start) <- c('lat','lon')
names(end) <- c('lat','lon')
names(ride) <- c(ride_id)

metres <- geodist(x=start, y=end, paired = T, measure = 'geodesic')
miles <- metres / 1601
miles

trips7 <- data.frame(Apple = distance_casual[,5], Distance = miles)

write.table(trips7, file="New_Distance_With_PK_Member.csv", sep=",")

install.packages("dyplr")
install.packages('tidyverse')
library(tidyverse)
RideCas3 <- read.csv("Ride_member.csv", header = FALSE)
SZNCas3 <- read.csv("Season_member.csv", header = FALSE)


rideid3 <- RideCas3[,1]
season3 <- SZNCas3[,1]
both <- c(rideid3, season3)
both

Boffum4 <- data.frame(rideid3 = RideCas3[,1], season3 = SZNCas3[,1])
write.table(Boffum4, file="Seasons_Member1000.csv", sep=",", row.names = FALSE)

SZNCas <- data.frame(Molecole = c("A", "B", "C", "F", "G"),
                  PZ4 = 4, PZ5 = 5, PZ6 = 6)

merged <- dplyr::full_join(df1, df2) %>%
  
view(RideCas)